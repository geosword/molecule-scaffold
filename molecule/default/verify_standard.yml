---
- name: if required_files is not set OR is empty, then we need to define it as an empty dict
  set_fact:
    required_files: {}
  when:
    - (required_files is not defined or required_files == None)

- name: check files
  block:
    # Create a dictionary with the filename as the index. This makes checking the desired attributes, like isdir, mode etc as easy as
    # file_index[<file_name>].mode. Otherwise, it would be indexed by ordinal.
    - name: file_index
      set_fact:
        file_index: "{{ file_index| default({}) | combine( {item.path: item} ) }}"
      loop: "{{ required_files|flatten(levels=1) }}"

    - name: stat required_files
      stat:
        path: "{{ item.path }}"
      register: required_files_stat
      become: true
      loop: "{{ required_files|flatten(levels=1) }}"

    - name: check required files actually exist
      assert:
        that: "{{ item.stat.exists }}"
        msg: "{{ item.invocation.module_args.path }} does not exist, and it should according to the unit tests"
      loop: "{{ required_files_stat.results|flatten(levels=1) }}"

    - name: check file modes are correct
      assert:
        that: "'{{ file_index[item.stat.path].mode }}' == '{{ item.stat.mode }}'"
        msg: >
          {{ item.invocation.module_args.path }} mode is not correct. Its currently {{ item.stat.mode }}
          and it should be {{ file_index[item.stat.path].mode }}
      loop: "{{ required_files_stat.results|flatten(levels=1) }}"
      when:
        - file_index[item.stat.path].mode is defined

    - name: check files are files and directories are directories
      assert:
        that: "'{{ file_index[item.stat.path].isdir }}' == '{{ item.stat.isdir }}'"
        msg: >
          {{ item.invocation.module_args.path }} isdir is not correct. Its currently {{ item.stat.isdir }}
          and it should be {{ file_index[item.stat.path].isdir }}
      loop: "{{ required_files_stat.results|flatten(levels=1) }}"
      when:
        - file_index[item.stat.path].isdir is defined
  when:
    - required_files is defined
    - required_files != None
    - required_files|length>0


- name: check installed pip packages
  block:
    - name: venv_index
      set_fact:
        venv_index: "{{ venv_index| default({}) | combine( {item.venv: item} ) }}"
      loop: "{{ required_pip_packages|flatten(levels=1) }}"

    - name: get pip information
      pip_package_info:
        clients: "{{ venv_index|flatten(levels=1) }}"
      register: pippackages

    - name: check the pip packages are present
      assert:
        that: "{{ pippackages.packages[item.venv][item.package] is defined }}"
        msg: "item is {{ item.package }} is not installed in {{ item.venv }}"
      loop: "{{ required_pip_packages|flatten(levels=1) }}"

    - name: check the pip packages installed is the right version
      assert:
        that: "{{ pippackages.packages[item.venv][item.package][0].version == item.version }}"
        msg: "item is {{ item.package }} is at version {{ pippackages.packages[item.venv][item.package][0].version }} is not at required {{ item.version }}"
      loop: "{{ required_pip_packages|flatten(levels=1) }}"
      when: item.version is defined
  when:
    - required_pip_packages is defined
    - required_pip_packages != None
    - required_pip_packages|length>0

- name: check installed packages
  block:
    - name: Get installed packages (Debian, redhat & others)
      package_facts:
        manager: auto
      become: true
      when: ansible_distribution != 'Archlinux'

    - name: Check packages are installed
      assert:
        that: "'{{ item }}' in {{ ansible_facts.packages }}"
        msg: "Package {{ item }} is not installed"
      loop: "{{ required_packages|flatten(levels=1) }}"
      when: ansible_distribution != 'Archlinux'

    - name: Get installed packages
      shell:
        cmd: "{{ package_list_command }} | awk '{print $1}'"
      register: installed_packages
      changed_when: false
      when:
        - package_list_command is defined
        - ansible_distribution == 'Archlinux'

    - name: Check packages are installed (ArchLinux)
      assert:
        that: "'{{ item }}' in {{ installed_packages.stdout.splitlines() }}"
        msg: "Package {{ item }} is not installed"
      loop: "{{ required_packages|flatten(levels=1) }}"
      when:
        - ansible_distribution == 'Archlinux'
        - package_list_command is defined

  when:
    - required_packages is defined
    - required_packages != None
    - required_packages|length>0

- name: if required_services is not set OR is empty, then we need to define it as an empty dict
  set_fact:
    required_services: {}
  when:
    - (required_services is not defined or required_services == None)

- name: check services
  block:
    - name: populate service facts
      service_facts:

    - name: check services are running as required
      assert:
        that: "{{ ansible_facts.services[item.key].state == item.value.state }}"
        msg: "{{ item.key }} state is {{ ansible_facts.services[item.key].state }} and it should be {{ item.value.state }} according to the unit tests"
      loop: "{{ required_services|dict2items }}"

    - name: check services are enabled as required
      assert:
        that: "{{ ansible_facts.services[item.key].status == item.value.status }}"
        msg: "{{ item.key }} status is {{ ansible_facts.services[item.key].status }} and it should be {{ item.value.status }} according to the unit tests"
      loop: "{{ required_services|dict2items }}"
  when:
    - required_packages is defined
    - required_packages != None
    - required_packages|length>0

# WARNING: READ THIS if you are running port checks
# If we want to get the "listening ports", then assuming we are using a docker container to test (which we predominently are here) then we need to run
# "netstat" on localhost, and not in the container. This is because the container we're testing the role in is interfacing with the docker instance it
# itself is running in. Therefore the testing container has a SIBLING relationship with the containers it stands up, and not a parent / child relationship
# as such, its impossible (?) to get the listening ports of the "host" from within the testing container, so this must be run on localhost, and those
# results checked
# WARNING 2: READ THIS is you are running port checks
# It also assumes that the user you are running as has sudo permissions on netstat, so we can get the prog that is listening, without that, we'll only know
# if the port is open or not. Further, if testing within docker, then the listening process will always be docker-prox (or whatever the docker proxy binary is)
# undoubtedly, this would be better on a vm than a container

- name: check ports
  block:
    - name: populate listening ports
      listen_ports_facts:
      delegate_to: localhost
      become: true
      when:
        - ansible_virtualization_type == 'docker'

    - name: populate listening port facts - when testing NOT with docker container
      listen_ports_facts:
      when:
        - ansible_virtualization_type != 'docker'

    - name: check programs a listening on the right ports
      assert:
        that: "{{ item.name == required_ports[item.port].name }}"
        msg: "port {{ item.port }} is not being listened on by {{ required_ports[item.port].name }} as defined in required_ports"
      loop: "{{ ansible_facts.tcp_listen|flatten(levels=1) }}"
      when: "required_ports[item.port] is defined"
  when:
    - required_packages is defined
    - required_packages != None
    - required_packages|length>0
